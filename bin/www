#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('finalccb:server');
var http = require('http');
var socketIO = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);
/**
 * Create HTTP server.
 */
var io = socketIO(server, {
  cors: {
    origin: '*',  // 上线时改为指定域名
    methods: ['GET', 'POST']
  }
});
const onlineUsers = new Map();


/**
 * Listen on provided port, on all network interfaces.
 */
io.on('connection', (socket) => {
  console.log('✅ New client connected', socket.id);

  socket.on('register', (userId) => {
    onlineUsers.set(userId, socket.id);
    console.log(`User ${userId} registered on socket`);
  });

  socket.on('send_message', async (data) => {
    const { chat_id, sender_id, receiver_id, content } = data;
    console.log('📩 Message from', sender_id, 'to', receiver_id, content);

    try {
      // 1. 存入 chat_messages 表
      await pool.query(`
            INSERT INTO chat_messages (chat_id, sender_id, message)
            VALUES ($1, $2, $3)
        `, [chat_id, sender_id, content]);

      // 2. 更新 chat_rooms 最后更新时间
      await pool.query(`
            UPDATE chat_rooms SET last_updated = NOW() WHERE id = $1
        `, [chat_id]);

      // 3. 广播消息
      const payload = {
        chat_id,
        sender_id,
        content,
        timestamp: new Date().toISOString()
      };

      const receiverSocket = onlineUsers.get(receiver_id);
      if (receiverSocket) {
        io.to(receiverSocket).emit('receive_message', payload);
      }

      socket.emit('receive_message', payload);

    } catch (err) {
      console.error('send_message error:', err);
    }
  });



  socket.on('typing', ({ receiver_id }) => {
    const receiverSocket = onlineUsers.get(receiver_id);
    if (receiverSocket) {
      io.to(receiverSocket).emit('typing', { timestamp: Date.now() });
    }
  });

  socket.on('disconnect', () => {
    console.log('❌ Client disconnected', socket.id);
    for (const [userId, sId] of onlineUsers.entries()) {
      if (sId === socket.id) {
        onlineUsers.delete(userId);
        console.log(`User ${userId} went offline`);
        break;
      }
    }
  });
});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
